{"ts":1362362102273,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var engine;\n\nvar output_debug_messages = true;\nif(typeof(engine) == \"undefined\"){\n\tif(init_engine(output_debug_messages)){\n\t\tengine.debug(\"Init passed: \" + engine.initialised);\n\t\tvar options = [];\n\t\tengine.prepare_simulation(options);\n\t\t//loop begins\n\t\tengine.run_simulation();\n\t}else{\n\t\talert(\"Init failed.\");\n\t}\n}\nfunction init_engine(debug){\n\tengine = {};\n\tengine.debug_enabled = false;\n\tengine.initialised = true;\n\tengine.gameTime = 0;\n\tengine.callbacks = {};\n\tengine.callbacks.logging_callback = false; //allocate a function to call it on log.\n\tengine.callbacks.new_jobs_callback = false;\n\tengine.callbacks.plane_status_changed = false;\n\tengine.callbacks.cash_changed_hands = false;\n\tengine.callbacks.no_money = false;\n\tif(debug){\n\t\tengine.debug_enabled = true;\n\t\tconsole.log(\"Debugger enabled.\");\n\t}\n\t\n\tengine.debug = function(message, severity){\n\t\tif(!this.debug_enabled){\n\t\t\treturn;\n\t\t}\n\t\tif(typeof(severity) == \"undefined\"){\n\t\t\tseverity = \"0\";\n\t\t}\n\t\tvar outputstring = \"\";\n\t\tif(severity > 0){\n\t\t\toutputstring = convert_severity(severity) + \": \" + message;\n\t\t}else{\n\t\t\toutputstring = message;\n\t\t}\n\t\tif(typeof(console) != \"undefined\"){\n\n\t\t\tconsole.log(outputstring);\n\t\t\tif(severity > 0){\n\t\t\t\tif(engine.debug_enabled){force_breakpoint();}\n\t\t\t}\n\t\t}\n\t\tif(typeof(engine.callbacks.logging_callback) == \"function\"){\n\t\t\tengine.callbacks.logging_callback(outputstring);\n\t\t}\n\t};\n\tengine.prepare_simulation = function(state_object){\n\t\tif(isArray(state_object)){\n\t\t\t//make a 'new game' state.\n\t\t\t\tvar new_game_args = state_object;\n\t\t\t\tengine.state_object = engine.get_new_state_object(new_game_args);\n\t\t\t\tengine.transaction(1000,\"Start Money\");\n\t\t\t\tengine.debug(\"Loaded a new game state.\");\n\t\t}\n\t\telse if(typeof(state_object) == \"object\"){\n\t\t\t//do some sort of checking and assign to state\n\t\t\tif(engine.check_state_object(state_object)){\n\t\t\t\tengine.state_object = state_object;\n\t\t\t}else{\n\t\t\t\tengine.debug(\"state object could be corrupt.\");\n\t\t\t}\n\t\t}else{\n\t\t\tengine.debug(\"Could not work out game state object - expected object to resume or array of options\",2);\n\t\t}\n\t\t\n\t\treturn true;\n\t};\n\tengine.run_simulation = function(){\n\t\tt=setInterval(function(){engine.tick();},30);\n\t};\n\tengine.tick = function(){\n\t\tvar logic_run_wait_time = 1000; //ms\n\t\tvar state = engine.state_object;\n\t\t\tvar now = new Date();\n\t\tengine.gameTime = now.getTime();\n\t\tif(state.metadata.last_logic_run < engine.gameTime - logic_run_wait_time){\n\t\t\t//TODO: Is it ok for simulation to continue if game is paused?\n\n\t\t\tvar currentDate = now.getSeconds();\n\t\t\t//engine.debug(\"tick: Has been \" + (logic_run_wait_time/10) + \"/100s since last run.. \" + currentDate);\n\t\t\t\n\t\t\t\t{\n\t\t\t\t//TODO: Refactor away.\n\n\t\t\t\t\t//check for arrivals\n\t\t\t\t\tvar p = engine.state_object.planes;\n\n\t\t\t\t\tp.forEach(function(plane){\n\t\t\t\t\t\t\t\tvar ap = lookup.lookup_airport_by_id(plane.next_airport_id);\n\t\t\t\t\t\t\t\tplane.next_airport_object = ap;\n\t\t\t\t\t\tvar prev_status = plane.status;\n\t\t\t\t\t\tif(plane.arrives_at < engine.gameTime){\n\t\t\t\t\t\t\tif(plane.arrives_at > 0){\n\t\t\t\t\t\t\t\tengine.debug(\"Plane \" + plane.id + \" is landing at \" + ap.name + \" (arrival time \" + plane.arrives_at + \")\");\n\t\t\t\t\t\t\t\tplane.arrives_at = 0;\n\t\t\t\t\t\t\t\t//plane is landing - pay player cash.\n\t\t\t\t\t\t\t\tif(plane.jobs_onboard.length > 0){\n\t\t\t\t\t\t\t\t\tplane.jobs_onboard.forEach(function(job){\n\n\t\t\t\t\t\t\t\t\t});//each jobs\n\t\t\t\t\t\t\t\t\tfor(var i=plane.jobs_onboard.length-1; i >=0;i--){\n\t\t\t\t\t\t\t\t\t\tvar job = plane.jobs_onboard[i];\n\t\t\t\t\t\t\t\t\t\tif(job.destination == ap.id){\n\t\t\t\t\t\t\t\t\t\t\tengine.transaction(job.cash_payment,\"unloading \" + job.type + \" \" + job.name);\n\t\t\t\t\t\t\t\t\t\t\tplane.jobs_onboard.splice(i,1);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tplane.status = \"landing\";\n\t\t\t\t\t\t\t\tplane.position = plane.next_airport_object.position;\n\t\t\t\t\t\t\t\tif(typeof(engine.callbacks.plane_status_changed) == \"function\" && plane.status != prev_status){\n\t\t\t\t\t\t\t\t\tengine.callbacks.plane_status_changed(plane);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tplane.status = \"grounded\";\n\t\t\t\t\t\t\t\tplane.position = plane.next_airport_object.position;\n\t\t\t\t\t\t\t\tif(typeof(engine.callbacks.plane_status_changed) == \"function\" && plane.status != prev_status){\n\t\t\t\t\t\t\t\t\tengine.callbacks.plane_status_changed(plane);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tplane.status = \"enroute\";\n\t\t\t\t\t\t\t\tplane.position = lookup.lookup_estimate_plane_position(plane);\n\t\t\t\t\t\t\t\tif(typeof(engine.callbacks.plane_status_changed) == \"function\"){\n\t\t\t\t\t\t\t\t\tengine.callbacks.plane_status_changed(plane);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(plane.jobs_onboard.length > 0){\n\t\t\t\t\t\t\tplane.jobs_onboard.forEach(function(job){\n\t\t\t\t\t\t\t\t//engine.debug(\"-- With \" + job.type + \" \" + job.name + \" onboard.\");\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}); //each plane\n\n\t\t\t\t\t//is it time to generate jobs?\n\t\t\t\t\tif(engine.state_object.next_job_generate < engine.gameTime){\n\t\t\t\t\t\t//time to generate new jobs.\n\t\t\t\t\t\tengine.timeout_jobs();\n\t\t\t\t\t\tengine.generate_jobs();\n\t\t\t\t\t\tengine.state_object.next_job_generate = engine.gameTime + engine.state_object.job_generate_wait_time;\n\t\t\t\t\t\tif(typeof(engine.callbacks.new_jobs_callback) == \"function\"){engine.callbacks.new_jobs_callback();}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tstate.metadata.last_logic_run = now.getTime();\n\t\t}\n\t};\n\tengine.timeout_jobs = function(){\n\t\tfor(var i=engine.state_object.jobs.length-1; i >=0;i--){\n\t\t\t//job has not been taken, and has been timed out.\n\t\t\tif(jobs[i].taken === false && jobs.timeout < engine.gameTime){\n\t\t\t\tengine.state_object.jobs.splice(i,1);\n\t\t\t}\n\t\t}\n\t};\n\tengine.generate_jobs = function(){\n\t\tvar people_first_names = ['Amy','Joanna','Kirstee','Michelle','Simon','Ben','Melanie','George','Ann','Hanna','Craig','Chris','Elizabeth','Suzanne','Georgina','Patricia','Victoria','Zana','Hilary','Dorothy','Judy','Kim','Esther','Gitta','Giha','Lyn','Glenda','Ann','Janette','Joyce','Leah'];\n\t\tvar people_last_names = ['Brown','Smith','Jones','Williams','Jackson','White','Black','Gray'];\n\t\tvar cargo_names = ['Cups','Bottles','Boxes','Phones','Mice','Keyboards','Monitors','USB Sticks','Wallets','Staplers','Labels','Paper','iPhones','Signs'];\n\t\tvar jobs = [];\n\t\tvar i;\n\t\tvar job;\n\t\t//for each airport from\n\t\t\t\t\t\t\tvar from_airports = engine.state_object.airports;\n\t\t\t\t\t\t\tfrom_airports.forEach(function(from_airport){\n\t\t\t\t\t\t\t\t//make a list of airports to.\n\t\t\t\t\t\t\t\tvar to_airports = engine.state_object.airports;\n\t\t\t\t\t\t\t\tto_airports.forEach(function(to_airport){\n\n\t\t\t\t\t\t\t\t\tif(to_airport.id !== from_airport.id){\n\t\t\t\t\t\t\t\t\t\tvar people_jobs_to_generate = from_airport.sizeMillions * to_airport.sizeMillions * 0.07 * getRandomInt(0,3);\n\t\t\t\t\t\t\t\t\t\tvar cargo_jobs_to_generate = from_airport.sizeMillions * to_airport.sizeMillions * 0.07 * getRandomInt(0,3);\n\t\t\t\t\t\t\t\t\t\tvar flight_distance = lookup.get_distance(from_airport.position, to_airport.position);\n\t\t\t\t\t\t\t\t\t\t\tfor(i = 0; i < people_jobs_to_generate;i++){\n\t\t\t\t\t\t\t\t\t\t\tvar fn = people_first_names[Math.floor(Math.random()*people_first_names.length)];\n\t\t\t\t\t\t\t\t\t\t\tvar ln = people_last_names[Math.floor(Math.random()*people_last_names.length)];\n\t\t\t\t\t\t\t\t\t\t\tengine.state_object.metadata.jobs_created +=1;\n\t\t\t\t\t\t\t\t\t\t\tjob = {\"timeout\":engine.gameTime + (engine.state_object.job_generate_wait_time * 3),\"taken\":false,\"start_airport\":from_airport.id, \"id\":engine.state_object.metadata.jobs_created,\"type\":\"people\",name:fn + \" \" + ln,gender:\"NA\",cash_payment:lookup.lookup_flight_retail_cost(flight_distance),destination:to_airport.id};\n\t\t\t\t\t\t\t\t\t\t\tengine.state_object.jobs.push(job);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor(i = 0; i < cargo_jobs_to_generate;i++){\n\t\t\t\t\t\t\t\t\t\t\tvar cargoname = cargo_names[Math.floor(Math.random()*cargo_names.length)];\n\t\t\t\t\t\t\t\t\t\t\tengine.state_object.metadata.jobs_created +=1;\n\t\t\t\t\t\t\t\t\t\t\tjob = {\"timeout\":engine.gameTime + (engine.state_object.job_generate_wait_time * 3),\"taken\":false,\"start_airport\":from_airport.id, \"id\":engine.state_object.metadata.jobs_created,\"type\":\"cargo\",name:cargoname,gender:\"NA\",cash_payment:lookup.lookup_flight_retail_cost(flight_distance),destination:to_airport.id};\n\t\t\t\t\t\t\t\t\t\t\tengine.state_object.jobs.push(job);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}); //to\n\t\t\t\t\t\t\t}); //from\n\t\t\tengine.force_ui_update();\n\t};\n\tengine.check_state_object = function(state_object){\n\t\t//TODO: Sanity check state object\n\t\tengine.debug(\"Checking game state object.\");\n\t\treturn true;\n\t};\n\tengine.get_new_state_object = function(args){\n\t\t//TODO: Return new game state object.\n\t\tengine.debug(\"Making a new game state object.\");\n\t\tvar game_state = {};\n\t\tgame_state.airports = [];\n\t\tgame_state.planes = [];\n\t\tgame_state.metadata = {};\n\t\tvar a = game_state.airports;\n\t\ta.push({\"id\":1,\"name\":\"Sydney\",\"sizeMillions\":5,\"activated\":true,\"jobs\":[],position:{latitude:-33.946884,longitude:151.181359}});\n\t\ta.push({\"id\":2,\"name\":\"Brisbane\",\"sizeMillions\":2,\"activated\":true,\"jobs\":[],position:{latitude:-27.392498,longitude:153.116455}});\n\t\ta.push({\"id\":3,\"name\":\"Adelaide\",\"sizeMillions\":2,\"activated\":true,\"jobs\":[],position:{latitude:-34.948498,longitude:138.530817}});\n\t\tvar ps = game_state.planes;\n\t\tvar p = {\"id\":1,\"model\":\"Cessna\",\"speed\":3,\"jobs_onboard\":[],\"itinerary\":[],status:\"\",next_airport_id:1,takeoff_time:0,position:{},\"last_airport_object\":{},\"next_airport_object\":a[0],\"arrives_at\":0,\"capacity_people\":2,\"capacity_cargo\":0};\n\t\tps.push(p);\n\t\tvar now = new Date();\n\t\tvar q = {\"id\":2,\"model\":\"Cessna\",\"speed\":3,\"jobs_onboard\":[],\"itinerary\":[],status:\"\",next_airport_id:2,takeoff_time:0,position:{},\"last_airport_object\":{},\"next_airport_object\":a[1],\"arrives_at\":0,\"capacity_people\":2,\"capacity_cargo\":0};\n\t\tps.push(q);\n\t\tvar r = {\"id\":3,\"model\":\"Cessna\",\"speed\":3,\"jobs_onboard\":[],\"itinerary\":[],status:\"\",next_airport_id:2,takeoff_time:0,position:{},\"last_airport_object\":{},\"next_airport_object\":a[1],\"arrives_at\":0,\"capacity_people\":1,\"capacity_cargo\":1};\n\t\tps.push(r);\n\t\tvar s = {\"id\":4,\"model\":\"Cessna\",\"speed\":3,\"jobs_onboard\":[],\"itinerary\":[],status:\"\",next_airport_id:2,takeoff_time:0,position:{},\"last_airport_object\":{},\"next_airport_object\":a[1],\"arrives_at\":0,\"capacity_people\":2,\"capacity_cargo\":2};\n\t\tps.push(s);\n\t\tvar m = game_state.metadata;\n\t\tm.world_start_time = Date.now();\n\t\tm.simulation_start_time = Date.now();\n\t\tm.last_logic_run = 0; //set to trigger first up.\n\t\tm.jobs_created = 0;\n\t\tgame_state.jobs = [];\n\t\tgame_state.money = 0;\n\t\tgame_state.bucks = 10;\n\t\tgame_state.plane_base_speed =1 ;//1;\n\t\tgame_state.flying_base_cost = 0.05;\n\t\tgame_state.job_generate_wait_time = 3 * 1000 * 60; //2 mins\n\t\tgame_state.next_job_generate = now.getTime();\n\t\treturn game_state;\n\t};\n\tengine.force_ui_update = function(){\n\t\tengine.state_object.planes.forEach(function(plane){\n\t\t\tif(typeof(engine.callbacks.plane_status_changed) == \"function\"){\n\t\t\t\tengine.callbacks.plane_status_changed(plane);\n\t\t\t}\n\t\t});\n\t\tengine.state_object.airports.forEach(function(airport){\n\t\t\tif(typeof(engine.callbacks.airport_status_changed) == \"function\"){\n\t\t\t\tengine.callbacks.airport_status_changed(airport);\n\t\t\t}\n\t\t});\n\t};\n\tengine.send_aircraft = function(plane_id, airport_id){\n\t\tvar plane = lookup.lookup_plane_by_id(plane_id);\n\t\tvar airport = lookup.lookup_airport_by_id(airport_id);\n\t\tvar flight_distance = lookup.get_distance(plane.next_airport_object.position, airport.position);\n\t\tif(!engine.transaction(lookup.get_flight_cost(flight_distance, plane)*-1,\"Cost of flight to \" + airport.name + \" from \" + plane.next_airport_object.name)){\n\t\t\treturn false;\n\t\t}\n\t\tplane.last_airport_object = plane.next_airport_object;\n\t\tplane.next_airport_id = airport_id;\n\t\tplane.next_airport_object = airport;\n\t\tplane.takeoff_time = engine.gameTime;\n\t\tengine.debug(\"Deducting \" + lookup.get_flight_cost(flight_distance, plane) + \" for cost of flight to \" + airport.name);\n\t\tplane.arrives_at = engine.gameTime + (1000 * 60 * lookup.get_flight_time(flight_distance, plane));\n\t\tif(typeof(engine.callbacks.plane_status_changed) == \"function\"){\n\t\t\tengine.callbacks.plane_status_changed(plane);\n\t\t}\n\t};\n\tengine.assign_job_to_plane = function(plane_id,job_id){\n\t\tvar job = lookup.lookup_job_by_id(job_id);\n\t\tvar plane = lookup.lookup_plane_by_id(plane_id);\n\t\tplane.jobs_onboard.push(job);\n\t\tengine.hide_job(job_id);\n\t\tif(typeof(engine.callbacks.plane_status_changed) == \"function\"){\n\t\t\tengine.callbacks.plane_status_changed(plane);\n\t\t}\n\n\t\tengine.force_ui_update();\n\t};\n\tengine.drop_job_at_this_airport = function(job_id, plane_id){\n\t\tvar job = lookup.lookup_job_by_id(job_id);\n\t\tvar plane = lookup.lookup_plane_by_id(plane_id);\n\t\tif(plane.status != \"grounded\"){\n\t\t\tengine.debug(\"Can't drop passenger here.\");\n\t\t}else{\n\t\t\tengine.debug(\"Have to drop job \" + job.name + \" at airport \" + plane.next_airport_object.name);\n\t\t\tjob.taken = false;\n\t\t\tfor(var i=plane.jobs_onboard.length-1; i >=0;i--){\n\t\t\t\tvar j = plane.jobs_onboard[i];\n\t\t\t\tif(j.id == job.id){\n\t\t\t\t\tengine.debug(\"Unloading\" + j.name + \" for layover.\");\n\t\t\t\t\tplane.jobs_onboard.splice(i,1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tengine.force_ui_update();\n\t\t}\n\t\t\n\t};\n\tengine.transaction = function(amount,reason){\n\t\tif(engine.state_object.money + amount < 0){\n\t\t\t//No money!\n\t\t\tif(typeof(engine.callbacks.no_money) == \"function\"){\n\t\t\t\tengine.callbacks.no_money(amount,reason);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tengine.state_object.money += amount;\n\t\tif(typeof(engine.callbacks.cash_changed_hands) == \"function\"){\n\t\t\tengine.callbacks.cash_changed_hands(amount,reason);\n\t\t}\n\t\treturn true;\n\t};\n\tengine.get_jobs = function(airport_id){\n\t\tvar jobs = engine.state_object.jobs;\n\t\tvar jobs_out = [];\n\t\tjobs.forEach(function(job){\n\t\t\tif(job.start_airport == airport_id && job.taken === false){\n\t\t\t\tjobs_out.push(job);\n\t\t\t}\n\t\t});\n\t\treturn jobs_out;\n\t};\n\tengine.hide_job = function(job_id){\n\t\tvar job = lookup.lookup_job_by_id(job_id);\n\t\tjob.taken = true;\n\t};\n\treturn true;\n}"]],"start1":0,"start2":0,"length1":0,"length2":13544}]],"length":13544}
{"contributors":[],"silentsave":false,"ts":1362362116505,"patch":[[{"diffs":[[0,"plane);\n\t\t}\n"],[1,"        return true;\n"],[0,"\t};\n\tengine."]],"start1":11742,"start2":11742,"length1":24,"length2":45}]],"length":13565,"saved":false}
{"contributors":[],"silentsave":false,"ts":1362438865672,"patch":[[{"diffs":[[0,"tion(){\n"],[-1,"\t\tfor(var i="],[1,"        var jobs = "],[0,"engine.s"]],"start1":5143,"start2":5143,"length1":28,"length2":35},{"diffs":[[0,"ect.jobs"],[1,";\n\t\tfor(var i=jobs"],[0,".length-"]],"start1":5186,"start2":5186,"length1":16,"length2":34}]],"length":13590,"saved":false}
